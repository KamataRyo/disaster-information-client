(function() {
  var DEFAULT_LANG, ENDPOINT_BASE, FALLBACK_LANG, LANGUAGE_LABELS, RESPONSE_FORMAT, app;

  ENDPOINT_BASE = "http://api.c4w.jp/api/v1/";

  RESPONSE_FORMAT = 'json';

  DEFAULT_LANG = 'ja';

  FALLBACK_LANG = 'en';

  LANGUAGE_LABELS = {
    ja: '日本語',
    en: 'English'
  };

  app = angular.module('disaster-information-client', ['pascalprecht.translate', 'ngSanitize']);

  app.config([
    '$translateProvider', function($translateProvider) {
      $translateProvider.useStaticFilesLoader({
        prefix: 'language/',
        suffix: '.json'
      });
      $translateProvider.useSanitizeValueStrategy(null);
      $translateProvider.preferredLanguage(DEFAULT_LANG);
      return $translateProvider.fallbackLanguage(FALLBACK_LANG);
    }
  ]);

  app.run([
    'acquireLocales', 'acquireEntries', '$rootScope', function(acquireLocales, acquireEntries, $rootScope) {
      $rootScope.languageLabel = LANGUAGE_LABELS;
      $rootScope.err = false;
      return acquireLocales().then(function(locales) {
        $rootScope.locales = locales;
        $rootScope.selectedLocale = DEFAULT_LANG;
        $rootScope.entries = [];
        return locales;
      }).then(function(locales) {
        return acquireEntries(locales);
      }).then(function(entries) {
        $rootScope.entries = [];
        return entries.sort(function(a, b) {
          var date;
          date = function(x) {
            return Date.parse(x.date);
          };
          return date(b - date(a));
        }).forEach(function(obj) {
          return obj.forEach(function(entry) {
            entry.meta = JSON.stringify(entry.meta);
            return $rootScope.entries.push(entry);
          });
        });
      }).then(function() {
        return $rootScope.$emit('entriesLoaded', {
          status: 'success'
        });
      })["catch"](function(res) {
        console.log(res);
        return $rootScope.err = true;
      });
    }
  ]);

  app.service('getEndpoint', [
    function() {
      return function(key) {
        return "" + ENDPOINT_BASE + key + "." + RESPONSE_FORMAT;
      };
    }
  ]);

  app.service('acquireLocales', [
    'getEndpoint', '$http', '$q', function(getEndpoint, $http, $q) {
      var deferred;
      deferred = $q.defer();
      return function() {
        return $http.get(getEndpoint('locale')).then(function(res) {
          var locales;
          locales = res.data;
          deferred.resolve(locales);
          return deferred.promise;
        }, function(res) {
          deferred.reject(res);
          return deferred.promise;
        });
      };
    }
  ]);

  app.service('acquireEntries', [
    'getEndpoint', '$http', '$q', function(getEndpoint, $http, $q) {
      return function(locales) {
        return $q.all(locales.map(function(locale) {
          var deferred;
          deferred = $q.defer();
          return $http.get(getEndpoint(locale)).then(function(res) {
            var entries;
            entries = res.data.entries;
            entries.forEach(function(entry) {
              var rawDate;
              rawDate = Date.parse(entry.date);
              entry.date = new Date(rawDate).toLocaleDateString();
              entry.time = new Date(rawDate).toLocaleTimeString();
              return entry.body = entry.body;
            });
            deferred.resolve(entries);
            return deferred.promise;
          }, function(res) {
            deferred.reject(res);
            return deferred.promise;
          });
        }));
      };
    }
  ]);

  app.service('router', [
    '$location', '$rootScope', function($location, $rootScope) {
      return $rootScope.$on('entriesLoaded', function() {
        return $rootScope.$watch(function() {
          return $location.path();
        }, function(url) {
          var entry;
          if (url === '') {
            return $rootScope.$emit('entryUnselected');
          } else {
            entry = ($rootScope.entries.filter(function(entry) {
              return entry.url === url;
            }))[0];
            return $rootScope.$emit('entrySelected', {
              entry: entry
            });
          }
        });
      });
    }
  ]);

  app.controller('mainCtrl', [
    '$scope', function($scope) {
      $scope.entry = false;
      return $scope.$on('entryUnselected', function(event) {
        return $scope.entry = false;
      });
    }
  ]);

  app.directive('entryArchive', function() {
    return {
      restrict: 'E',
      transclude: true,
      replace: true,
      templateUrl: 'templates/entry-archive.html',
      controller: [
        'router', '$scope', function(router, $scope) {
          $scope.detag = function(html) {
            if (html != null) {
              return String(html).replace(/<[^>]+>/gm, '');
            } else {
              return '';
            }
          };
          return $scope.select = function(entry) {
            return $scope.$emit('entrySelected', {
              entry: entry
            });
          };
        }
      ]
    };
  });

  app.directive('singleEntry', function() {
    return {
      restrict: 'E',
      transclude: true,
      replace: true,
      templateUrl: 'templates/single-entry.html',
      controller: [
        '$scope', '$rootScope', function($scope, $rootScope) {
          $scope.unselect = function() {
            return $scope.entry = false;
          };
          $rootScope.$on('entrySelected', function(event, arg) {
            var entry;
            entry = arg.entry;
            return $scope.entry = entry;
          });
          return $rootScope.$on('entryUnselected', function(event) {
            return $scope.entry = false;
          });
        }
      ]
    };
  });

  app.directive('languageSwitch', function() {
    return {
      restrict: 'E',
      transclude: true,
      replace: true,
      templateUrl: 'templates/language-switch.html',
      controller: [
        '$translate', '$scope', '$rootScope', function($translate, $scope, $rootScope) {
          var changeLanguage;
          $scope.key = DEFAULT_LANG;
          changeLanguage = function(key) {
            $translate.use(key);
            $rootScope.selectedLocale = key;
            return $rootScope.entriesShim = $rootScope.entries.filter(function(entry) {
              return entry.lang === key;
            });
          };
          $scope.changeLanguage = changeLanguage;
          return $rootScope.$on('entriesLoaded', function() {
            $scope.key = $rootScope.selectedLocale;
            return changeLanguage($scope.key);
          });
        }
      ]
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
